import numpy as np
import math
import matplotlib.pyplot as plt
import argparse
import GC_skew
from Bio import SeqIO

parser = argparse.ArgumentParser()
parser.add_argument('--gene_complexity_file', type=str, default='no', help='File with window complexity by genes')
parser.add_argument('--base_coordinates_file', type=str, default='no', help='File with coordinates  for each gene. Generated by genes_coordinates_finder.py')
parser.add_argument('--fna', type=str, default='no', help='fna file path')
parser.add_argument('--out_file', type=str, default='no', help='Out txt file')
args = parser.parse_args()

def create_complexity_by_base(gene_complexity_file, base_coordinates_file, out_file, plot=True, fna='no'):

	print('Base complexity table creating from ' + gene_complexity_file + '...')

	gene_complexity_file = open(gene_complexity_file, 'r')
	base_coordinates_file_1 = open(base_coordinates_file, 'r')
	base_coordinates_file_2 = open(base_coordinates_file, 'r')

	base_complexity_table = []
	gene_complexity = {}

	for line in gene_complexity_file:
		gene_complexity.update([(line.split('\t')[0], int(line.split('\t')[1][:-1]))])


	length = 0
	for line in base_coordinates_file_1:
		length = int(line.split('\t')[-1][:-1])

	for i in range(length):
		base_complexity_table.append(0)

	Points = []

	for line in base_coordinates_file_2:

		complexity = gene_complexity[line.split('\t')[0]]

		end = int(line.split('\t')[2][:-1])
		start = int(line.split('\t')[1]) - 1
		
		point = int((end+start)/2)

		Points.append([point, complexity])



		for i in range(start, end):
			base_complexity_table[i] = complexity


	Linear_complexity_table = []

	for i in range(length):
		Linear_complexity_table.append(0)

	for i in range(len(Points) - 1):
		k = (Points[i][1] - Points[i+1][1])/(Points[i][0] - float(Points[i+1][0]))
		b = Points[i][1] - k*Points[i][0]

		for j in range(Points[i][0] + 1, Points[i+1][0]):
			Linear_complexity_table[j] = k*j + b







	f_out = open(out_file, 'a+')

	


	ans_cleared = []
	for i in range(int(len(Linear_complexity_table))):
		ans_cleared.append(Linear_complexity_table[i])


	i = 0
	for base in ans_cleared:
		f_out.write(str(i) + '\t' + str(base) + '\n')
		i += 1

	if plot == True and fna != 'no':

		for rec in SeqIO.parse(args.fna, 'fasta'):
	        
		    gc = GC_skew.skew_count(rec)

		    ori = gc.index(min(gc))
		    break

		print('Origin coordinate: ' + str(ori))

		fig, ax1 = plt.subplots(figsize=(16,8))

		ax1.set_xlabel('bp')
		ax1.set_ylabel('complexity')
		ax1.plot(ans_cleared, label='complexity')

		ax2 = ax1.twinx()
		ax2.set_ylabel('GC skew')
		ax2.plot(gc, color='r', label='GC skew')
		ax2.legend()

		plt.show()

	print('Done!')

	return ans_cleared


plot = False
if args.fna != '0':
	plot = True


if args.gene_complexity_file != 'no' and args.base_coordinates_file != 'no':
	ans = create_complexity_by_base(args.gene_complexity_file, args.base_coordinates_file, args.out_file, plot=plot, fna=args.fna)

