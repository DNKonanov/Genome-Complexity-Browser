import argparse

parser = argparse.ArgumentParser()

parser.add_argument('--orfiles', default='no', type=str, help='OrthoFinder output file')
parser.add_argument('--main_chain_file', default='no', type=str, help='File with main chain, generated by start.sh utilite')
parser.add_argument('-o', '--output_file', default='STDOUT', type=str, help='Output file path')
parser.add_argument('--name', default='no', type=str, help='name of base stamm')
args = parser.parse_args()


def parser_chain(Orthologous_file_path, Main_chain_file_path, output_file, name):

	print('Gene coordinates file creating with ' + name + '...')
	out = open(output_file, 'a+')


	ortho_file = open(Orthologous_file_path, 'r')
	main_chain_file = open(Main_chain_file_path, 'r')

	main_chain = []
	coordinates = {}
	for line in main_chain_file:
		if line.find('\t') >= 0:
			break
		main_chain.append(line[:-1])
		coordinates.update([(line[:-1], [])])

	for line in ortho_file:

		gene = line.split(': ')[0]
		for i in line.split(': ')[1].split(' '):
			if i.split('|')[0] == name and gene in coordinates:
				start = int(i.split('|')[-2])
				end = int(i.split('|')[-1])
				coordinates[gene].append(start)
				coordinates[gene].append(end)
	main_chain = []
	for gene in coordinates:
		main_chain.append([coordinates[gene][0], coordinates[gene][1], gene])


	main_chain.sort()

	for i in main_chain:
		out.write(i[2] + '\t' + str(i[0]) + '\t' + str(i[1]) + '\n')

	print('Done!')


if args.orfiles != 'no' and args.main_chain_file  != 'no' and args.output_file != 'no' and args.name != 'no':
	parser_chain(args.orfiles, args.main_chain_file, args.output_file, args.name)