import argparse
from pickle import dump
import os
from gene_graph_lib.compute_complexity import GenomeGraph
import sqlite3
import subprocess

parser = argparse.ArgumentParser()
parser.add_argument('--db', default='no', type=str, help='database generated by orthofinder_parse script and filled by start_computing.py script (with --save_db parameter)')
parser.add_argument('--dbpar', default='no', type=str, help='database generated by orthofinder_parse_par script and filled by start_computing.py script (with --save_db parameter)')
parser.add_argument('--sif', default='no', type=str, help='sif file generated by orthofinder_parse script')
parser.add_argument('--sifpar', default='no', type=str, help='sif file generated by orthofinder_parse_par script')
parser.add_argument('--name', default='auto', type=str, help='new name in data directory (same as sif name by default)')
args = parser.parse_args()


if args.db == 'no' or args.sif == 'no':
    print('You need to specify at least --db and --sif parameters')

else:
    if 'no' not in (args.dbpar, args.sifpar) or (args.sifpar == 'no' and args.dbpar == 'no'):
        success = 1
        pass


    else:
        print('You need to specify both db and sif files!')


if success == 1:

    if args.name == 'auto':
        name = args.db.split('/')[-1].split('.db')[0]

    else:
        name = args.name
    subprocess.call('mkdir data/' + name, shell=True)
    subprocess.call('cp ' + args.db + ' data/' + name, shell=True)
    subprocess.call('cp ' + args.sif + ' data/' + name, shell=True)
    subprocess.call('mv data/' + name + '/' + args.db.split('/')[-1] + ' data/' + name + '/' + name + '.db', shell=True)
    subprocess.call('mv data/' + name + '/' + args.sif.split('/')[-1] + ' data/' + name + '/' + name + '.sif', shell=True)

    if args.dbpar != 'no':
        subprocess.call('cp ' + args.dbpar + ' data/' + name, shell=True)
        subprocess.call('cp ' + args.sifpar + ' data/' + name, shell=True)
        subprocess.call('mv data/' + name + '/' + args.dbpar.split('/')[-1] + ' data/' + name + '/' + name + '_pars.db', shell=True)
        subprocess.call('mv data/' + name + '/' + args.sifpar.split('/')[-1] + ' data/' + name + '/' + name + '_pars.sif', shell=True)

    f = open('strains_decode.txt')

    codes = {}

    data_path = 'data/'

    for line in f:
        code = line.split(' ')[-1][:-3]
        realname = ''.join(line.split(' ')[:-1])
        codes[code] = realname

    org = name

    print('Name in data directory: ' + org)
    #non-pars table
    connect = sqlite3.connect(data_path + org + '/' + org + '.db')
    c = connect.cursor()
    
    genome_codes = [q for q in c.execute('select genome_id,genome_code from genomes_table')]

    for code in genome_codes:
        for ref_code in codes:
            if ref_code in code[1]:
                c.execute('update genomes_table set genome_name="' + codes[ref_code] + '" where genome_id=' + str(code[0]))

    
    connect.commit()
    connect.close()


    if args.dbpar != 'no':
        #pars table
        connect = sqlite3.connect(data_path + org + '/' + org + '_pars.db')
        c = connect.cursor()
        
        genome_codes = [q for q in c.execute('select genome_id,genome_code from genomes_table')]

        for code in genome_codes:
            for ref_code in codes:
                if ref_code in code[1]:
                    c.execute('update genomes_table set genome_name="' + codes[ref_code] + '" where genome_id=' + str(code[0]))

        connect.commit()
        connect.close()


    print('dumping...')
    g = GenomeGraph()
    g.read_graph('data/' + name + '/' + name + '.sif')
    dump_file = open('data/' + name + '/' + name + '.dump', 'wb')
    dump(g, dump_file)

    if args.dbpar != 'no':
    
        g = GenomeGraph()
        g.read_graph('data/' + name + '/' + name + '_pars.sif')
        dump_file = open('data/' + name + '/' + name + '_pars.dump', 'wb')
        dump(g, dump_file)    

