import argparse
from collections import OrderedDict
import sqlite3
import reverse
from find_context import find_context

parser = argparse.ArgumentParser()
parser.add_argument('-i', '--input_file', default='no', type=str, help='input_file, generated by Orthofinder')
parser.add_argument('-o', '--out_file', default='paths', type=str, help='output file prefix (default paths)')
args = parser.parse_args()


graph = OrderedDict()
length_table = OrderedDict()
coord_table = OrderedDict()

Data = OrderedDict()

for line in open(args.input_file, 'r'):

	OG, string = line.split(': ')[0], line.split(': ')[1][:-1]


	stamms = string.split(' ')
	for stamm in stamms:
		name = stamm.split('|')[0]
		start_coord = int(stamm.split('|')[-2])
		end_coord = int(stamm.split('|')[-1])
		coord = int(stamm.split('|')[1])
		description = stamm.split('|')[2]
		contig_name = stamm.split('|')[3]

		if name not in Data:
			Data[name] = {contig_name:[(start_coord, end_coord, description, OG)]}

			length_table[name] = {}

		elif contig_name not in Data[name]:
			Data[name][contig_name] = [(start_coord, end_coord, description, OG)]

		else:
			Data[name][contig_name].append((start_coord, end_coord, description, OG))
		length_table[name].update([(OG, end_coord - start_coord)])

coordinates = OrderedDict()
for name in Data:
    graph[name] = OrderedDict()
    coordinates[name] = OrderedDict()
    for contig in Data[name]:
        Data[name][contig].sort()
        graph[name][contig] = [Data[name][contig][i][3] for i in range(len(Data[name][contig]))]
        coordinates[name][contig] = [(Data[name][contig][i][0],
                                    Data[name][contig][i][1],
                                    Data[name][contig][i][2]) for i in range(len(Data[name][contig]))]


out_context = open(args.out_file + '_context.txt', 'w')
og_context = find_context(graph)
for og in og_context:
	out_context.write(og + '\t' + str(og_context[og]) + '\n')


out = open(args.out_file + '.sif', 'w')

graph, reversed_chains = reverse.reverse(graph, length_table)


print(graph)
for stamm in graph:
	for contig in graph[stamm]:
		if contig in reversed_chains[stamm]:
			print(contig)
			coordinates[stamm][contig].reverse()


out_coord = open(args.out_file + '_genes.sif', 'w')
out_coord.write('genome\tcontig\tgene\tstart\tend\tdescription\n')

for name in graph:
    print(name)
    print('---')
	
    for contig in graph[name]:
        if len(graph[name][contig]) < 2:
            continue
        print(contig)
        for i in range(len(graph[name][contig])):
            gene = graph[name][contig][i]
            out_coord.write(name + '\t' + contig + '\t' + gene + '\t' + str(coordinates[name][contig][i][0]) + '\t' + str(coordinates[name][contig][i][1]) + '\t' + str(coordinates[name][contig][i][2]) + '\n')
            try:
                line = graph[name][contig][i] + ' ' + graph[name][contig][i + 1] + ' ' + name + ' ' + contig + '\n'
                out.write(line)
            except IndexError:
                continue

out_coord.close()
out.close()